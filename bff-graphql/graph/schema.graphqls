# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# -- TYPES --
type GenericResponse {
  success: Boolean!
}

type User {
  id: ID!
  createdAt: String
  updatedAt: String
  name: String!
  email: String!
}

type Product {
  id: ID!
  createdAt: String
  updatedAt: String
  title: String!
  description: String!
  thumb: String!
  availables: Int!
  price: Float!
}

type Order {
  id: ID!
  quantity: Int!
  createdAt: String
  updatedAt: String
  user: User
  product: Product
}

type SignInResponse {
  Token: String!
}


# -- QUERY -- 
type Query {
  user(id: String!): User
  product(id: String!): Product
  products(page: Int! = 1, limit: Int! = 10): [Product]
  userOrders: [Order]
}


# -- INPUTS --
input SignInRequest {
  email: String!
  password: String!
}

input NewUserInput {
  name: String!
  email: String!
  password: String!
}

input NewProductInput {
  title: String!
  description: String!
  thumb: String!
  availables: Int!
  price: Float!
}

input UpdateProductInput {
  ID: String!
  title: String!
  description: String!
  thumb: String!
  price: Float!
}

input DeleteProductInput {
  ID: String!
}

input UpdateProductAvailablesInput {
  ID: String!
  valueToAdd: Int!
}

input NewOrderInput {
  productId: String!
  quantity: Int!
}

# -- MUTATIONS --
type Mutation {
  # auth
  signIn(input: SignInRequest): SignInResponse!
  # user
  createUser(input: NewUserInput!): User!
  # product
  createProduct(input: NewProductInput!): Product!
  updateProduct(input: UpdateProductInput!): Product!
  deleteProduct(input: DeleteProductInput!): GenericResponse!
  updateProductAvailablesValue(input: UpdateProductAvailablesInput!): Product!
  # order
  createOrder(input: NewOrderInput!): Order!
}
